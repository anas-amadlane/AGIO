
SELECT name FROM sqlite_master WHERE type in ('table') AND name like 'BP_%';

sqlite> WITH RECURSIVE date_sequence AS (
    SELECT date('2023-04-01') AS date
    UNION ALL
    SELECT date(date_sequence.date, '+1 day')
    FROM date_sequence
    WHERE strftime('%Y-%m', date_sequence.date) < '2023-07'
)
SELECT date FROM date_sequence WHERE strftime('%Y-%m', date) < '2023-07';


--date_dep 'YY-MM-DD'
--date_fin  'YY-MM'
WITH RECURSIVE date_sequence AS (
    SELECT
        date('%s') AS date
    UNION ALL
    SELECT
        date(date_sequence.date, '+1 day') FROM date_sequence WHERE strftime('%Y_%m', date_sequence.date) < '%s'
)
SELECT date FROM date_sequence WHERE strftime('%Y_%m', date) < '%s';



DROP VIEW IF EXISTS ConcatenatedView;CREATE VIEW ConcatenatedView AS SELECT S_DATE, S_DEBIT, S_CREDIT FROM ( SELECT DATE(DATE_OP) AS S_DATE, SUM(DEBIT) AS S_DEBIT, SUM(CREDIT) AS S_CREDIT FROM
GROUP BY DATE(DATE_OP)
UNION ALL
SELECT DATE(DATE_OP) AS S_DATE, SUM(DEBIT) AS S_DEBIT, SUM(CREDIT) AS S_CREDIT FROM
GROUP BY DATE(DATE_OP)) GROUP BY DATE(S_DATE) ORDER BY S_DATE;


SELECT S_DATE, (SUM(S_CREDIT) - SUM(S_DEBIT)) FROM (
SELECT date(DATE_OP) as S_DATE, SUM(DEBIT) as S_DEBIT, SUM(CREDIT) as S_CREDIT from BP_2023_1 GROUP BY date(DATE_OP)
UNION ALL
SELECT date(DATE_OP) as S_DATE, SUM(DEBIT) as S_DEBIT, SUM(CREDIT) as S_CREDIT from BMCE_2023_1 GROUP BY date(DATE_OP)) GROUP BY date(S_DATE) order by S_DATE;



SELECT
    DATE_OP,
    CASE
        WHEN total_sum <= 50000 THEN total_sum
        ELSE 50000
    END AS column1,
    CASE
        WHEN total_sum <= 50000 THEN 0
        ELSE total_sum - 50000
    END AS column2
FROM
    (
        SELECT
            date_column,
            SUM(value_column1 + value_column2 + value_column3) AS total_sum
        FROM
            (
                SELECT date_column, value_column1, 0 AS value_column2, 0 AS value_column3 FROM table1
                UNION ALL
                SELECT date_column, 0 AS value_column1, value_column2, 0 AS value_column3 FROM table2
                UNION ALL
                SELECT date_column, 0 AS value_column1, 0 AS value_column2, value_column3 FROM table3
            ) AS subquery
        GROUP BY date_column
    ) AS result







WITH RECURSIVE date_sequence AS (
    SELECT date('2023-06-01') AS date
    UNION ALL
    SELECT date(date_sequence.date, '+1 day')
    FROM date_sequence
    WHERE strftime('%Y-%m', date_sequence.date) = '2023-06'
)
SELECT date FROM date_sequence WHERE strftime('%Y-%m', date) = '2023-06';


WITH RECURSIVE date_sequence AS (SELECT date('%s') AS date UNION ALL SELECT date(date_sequence.date, '+1 day') FROM date_sequence WHERE strftime('%Y-%m', date_sequence.date) = '%s') SELECT date FROM date_sequence WHERE strftime('%Y-%m', date) = '%s';



CREATE TABLE IF NOT EXISTS SOLDE(BP DECIMAL, CDM DECIMAL, BMCE DECIMAL, SGMB DECIMAL, AWB DECIMAL, CIH DECIMAL, BMCI DECIMAL, ARB DECIMAL);

CREATE IF NOT EXISTS BP_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BP_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BP_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS CDM_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS CDM_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS CDM_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS BMCE_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BMCE_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BMCE_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS SGMB_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS SGMB_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS SGMB_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS AWB_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS AWB_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS AWB_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS CIH_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS CIH_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS CIH_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS BMCI_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BMCI_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS BMCI_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);

CREATE IF NOT EXISTS ARB_TX_REG(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS ARB_TX_PLA(START_DATE DATE, END_DATE DATE, TAUX DECIMAL);
CREATE IF NOT EXISTS ARB_LINE(START_DATE DATE, END_DATE DATE, LINE DECIMAL);



CREATE TABLE monthly_debits (
  date DATE,
  debit REAL
);

-- Insert the range of dates and sum the debit values
INSERT INTO monthly_debits (date, debit)
SELECT date_sequence.date, SUM(total_debits.debit)
FROM (
  WITH RECURSIVE date_sequence AS (
    SELECT date('2023-01-01') AS date
    UNION ALL
    SELECT date(date_sequence.date, '+1 day')
    FROM date_sequence
    WHERE strftime('%Y-%m', date_sequence.date) = '2023-01' -- Specify the month and year here
  )
  SELECT date FROM date_sequence
) AS date_sequence
LEFT JOIN (
  SELECT date, debit FROM table1 -- Replace with your table name for the first month
  UNION ALL
  SELECT date, debit FROM table2 -- Replace with your table name for the second month
  UNION ALL
  SELECT date, debit FROM table3 -- Replace with your table name for the third month
) AS total_debits
ON strftime('%Y-%m-%d', date_sequence.date) = strftime('%Y-%m-%d', total_debits.date)
GROUP BY date_sequence.date;

CREATE TABLE monthly_debits (
  date DATE,
  debit REAL
);

WITH RECURSIVE date_sequence AS (
    SELECT date('2023-06-01') AS date
    UNION ALL
    SELECT date(date_sequence.date, '+1 day')
    FROM date_sequence
    WHERE strftime('%Y-%m', date_sequence.date) = '2023-06'
)
SELECT date FROM date_sequence WHERE strftime('%Y-%m', date) = '2023-06';

SELECT date(DATE_OP) as stat_day, SUM(DEBIT), SUM(CREDIT) from BP_2023_1 GROUP BY date(DATE_OP) order by stat_day;

-- Insert the range of dates and sum the debit values
INSERT INTO monthly_debits (date, debit)
SELECT date_sequence.date, SUM(total_debits.debit)
FROM (
  WITH RECURSIVE date_sequence AS (
    SELECT date('2023-04-01') AS date
    UNION ALL
    SELECT date(date_sequence.date, '+1 day')
    FROM date_sequence
    WHERE strftime('%Y-%m', date_sequence.date) < '2023-06'
  )
  SELECT date FROM date_sequence WHERE strftime('%Y-%m', date) = '2023-06'
) AS date_sequence
LEFT JOIN (


    SELECT date(DATE_OP) as date, SUM(DEBIT) as debit from BP_2023_1 GROUP BY date(DATE_OP)
    UNION ALL
    SELECT date(DATE_OP) as date, SUM(DEBIT) as debit from BP_2023_2 GROUP BY date(DATE_OP)
    UNION ALL
    SELECT date(DATE_OP) as date, SUM(DEBIT) as debit from BP_2023_3 GROUP BY date(DATE_OP)
    order by date


) AS total_debits
ON strftime('%Y-%m-%d', date_sequence.date) = strftime('%Y-%m-%d', total_debits.date)
GROUP BY date_sequence.date;



CREATE TABLE DailyBalance (
  date DATE PRIMARY KEY,
  balance DECIMAL(10, 2)
);

-- Set the date range for which you want to calculate the daily balances
  DECLARE @startDate DATE = '2023-05-01';
  DECLARE @endDate DATE = '2023-07-30';

  -- Loop through each day within the date range
  WHILE @startDate <= @endDate
  BEGIN
    -- Calculate the balance for the current day
    INSERT INTO DailyBalance (date, balance)
    SELECT
      @startDate,
      ISNULL(SUM(CREDIT), 0) - ISNULL(SUM(DEBIT), 0)
    FROM
      BMCE_ + FORMAT(@startDate, 'yyyy_MM') -- Get the corresponding month's table
    WHERE
      DATE_OP <= @startDate; -- Consider only transactions on or before the current day

    -- Increment the current date by 1 day
    SET @startDate = DATEADD(DAY, 1, @startDate);
  END
-- Set the date range for which you want to calculate the daily balances
-- Note: In SQLite, you can use common table expressions (CTEs) to generate a series of dates
-- Set the date range for which you want to calculate the daily balances
-- Note: In SQLite, you can use common table expressions (CTEs) to generate a series of dates

WITH RECURSIVE dates(date) AS (
  VALUES('2023-05-01')
  UNION ALL
  SELECT DATE(date, '+1 day') FROM dates WHERE date < '2023-07-31'
)
INSERT INTO DailyBalance (date, balance)
SELECT
  dates.date,
  SUM(CREDIT) - SUM(DEBIT) AS balance
FROM dates
LEFT JOIN (
  SELECT
    DATE_OP,
    CREDIT,
    DEBIT
  FROM 'BMCE_' || STRFTIME('%Y_%m', date)
) AS month_data ON month_data.statement_date <= dates.date
GROUP BY dates.date;


-- Drop the view if it already exists
DROP VIEW IF EXISTS ConcatenatedView;

-- Generate the dynamic SQL query to concatenate the tables and create the view
CREATE VIEW ConcatenatedView AS
SELECT *
FROM (
  -- Generate the UNION ALL query by querying the sqlite_master table
  SELECT 'BMCE_2023_1' AS table_name -- Replace with your table names
  UNION ALL
  SELECT 'statement_02_2023'
  -- Add more UNION ALL clauses for other tables
) AS concatenated_tables
JOIN sqlite_master ON concatenated_tables.table_name = sqlite_master.name
WHERE sqlite_master.type = 'table';


-- Create the table for operation values
CREATE TABLE OperationValues (
  date DATE,
  operation DECIMAL(10, 2)
);

-- Insert sample data into the operation values table
INSERT INTO OperationValues (date, operation)
VALUES
  ('2023-06-01', 1000.00),
  ('2023-06-02', -250.00),
  ('2023-06-03', -300.00),
  ('2023-06-04', 1500.00),
  ('2023-06-05', -500.00);

-- Create a view to calculate the balance
CREATE VIEW BalanceView AS
SELECT
  date,
  (
    SELECT
      (SELECT balance FROM InitialBalance) +
      SUM(operation)
    FROM
      OperationValues
    WHERE
      date <= o.date
  ) AS balance
FROM
  OperationValues o;

CREATE VIEW BalanceView AS SELECT DATE_OP, (
  SELECT 100000 + SUM(DEBIT) FROM ConcatenatedView WHERE DATE_OP <= o.DATE_OP
) AS balance FROM ConcatenatedView o;

DROP VIEW IF EXISTS BMCE_CONC_OP;
CREATE VIEW IF NOT EXISTS BMCE_CONC_OP AS
WITH tmp AS (
    SELECT
        DATE(DATE_OP) AS S_DATE,
        SUM(DEBIT) AS S_DEBIT,
        SUM(CREDIT) AS S_CREDIT
    FROM BMCE_2023_1
    GROUP BY DATE(DATE_OP)
    UNION ALL
    SELECT
        DATE(DATE_OP) AS S_DATE,
        SUM(DEBIT) AS S_DEBIT,
        SUM(CREDIT) AS S_CREDIT
    FROM BMCE_2023_2
    GROUP BY DATE(DATE_OP)
    UNION ALL
    SELECT
        DATE(DATE_OP) AS S_DATE,
        SUM(DEBIT) AS S_DEBIT,
        SUM(CREDIT) AS S_CREDIT
    FROM BMCE_2023_3
    GROUP BY DATE(DATE_OP)
)
SELECT
    S_DATE,
    S_DEBIT,
    S_CREDIT,
    (
        SELECT
            (SELECT SOLDE FROM BQ_SPEC WHERE BQ='BMCE') + (SUM(S_CREDIT) - SUM(S_DEBIT))
        FROM tmp
        WHERE S_DATE <= o.S_DATE
    ) AS BALANCE
FROM tmp o
GROUP BY DATE(S_DATE)
ORDER BY S_DATE;


CREATE VIEW IF NOT EXISTS CONC_TEST AS
DROP VIEW IF EXISTS BQ_SPEC;
CREATE TABLE IF NOT EXISTS BQ_SPEC(BQ VARCHAR, SOLDE DECIMAL, LINE DECIMAL, LINE_SDATE DATE, LINE_EDATE DATE, REG_TX DECIMAL, REG_SDATE DATE, REG_EDATE DATE, PLA_TX DECIMAL, PLA_SDATE DATE, PLA_EDATE DATE);
INSERT INTO BQ_SPEC VALUES('BMCE', -10772992.04, 10000000, '2123/01/01', '2123/01/01', 5.5, '2023/01/01', '2123/01/01', 7.5, '2023/01/01', '2123/01/01');


WHITH TEST AS (
  SELECT
    DATE(S_DATE) AS DATE,
    CASE
      WHEN S_DEBIT >= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN S_DEBIT ELSE (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
      END AS NB_DEB_REG,
    CASE
      WHEN S_DEBIT >= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN 0 ELSE S_DEBIT - (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
      END AS NB_DEB_PLA
  FROM BMCE_CONC_OP) SELECT DATE, NB_DEB_REG, NB_DEB_PLA;

DROP VIEW IF EXISTS TEST;
  CREATE VIEW IF NOT EXISTS TEST AS
WITH TEST AS (
    SELECT
        DATE(S_DATE) AS DATE,
        CASE
          WHEN BALANCE >= 0 THEN BALANCE
          ELSE 0
        END AS NB_CRE,
        CASE
          WHEN BALANCE >= 0 THEN 0
          ELSE
            WHEN -1 * BALANCE <= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN -1 * BALANCE
            ELSE (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
        END AS NB_DEB_REG,
        CASE
          WHEN BALANCE >= 0 THEN 0
          ELSE
            WHEN -1 * BALANCE <= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN 0
            ELSE -1 * BALANCE - (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
        END AS NB_DEB_PLA
    FROM CONC_TEST
)
SELECT DATE, NB_DEB_REG, NB_DEB_PLA
FROM TEST;

DROP VIEW IF EXISTS TEST;

CREATE VIEW IF NOT EXISTS TEST AS
WITH TEST AS (
    SELECT
        DATE(S_DATE) AS DATE,
        CASE
          WHEN BALANCE >= 0 THEN BALANCE
          ELSE 0
        END AS NB_CRE,
        CASE
          WHEN BALANCE >= 0 THEN 0
          WHEN -1 * BALANCE <= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN -1 * BALANCE
          ELSE (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
        END AS NB_DEB_REG,
        CASE
          WHEN BALANCE >= 0 THEN 0
          WHEN -1 * BALANCE <= (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE') THEN 0
          ELSE -1 * BALANCE - (SELECT LINE FROM BQ_SPEC WHERE BQ='BMCE')
        END AS NB_DEB_PLA
    FROM CONC_TEST
)
SELECT DATE, NB_CRE, NB_DEB_REG, NB_DEB_PLA, ((NB_DEB_REG * (SELECT REG_TX FROM BQ_SPEC WHERE BQ='BMCE')/100)/360 + (NB_DEB_PLA * (SELECT PLA_TX FROM BQ_SPEC WHERE BQ='BMCE')/100)/360) AS INTER
FROM TEST;

CREATE TABLE IF NOT EXISTS TICKET_BMCE_2023_1(Mois VARCHAR, Autorise DECIMAL, Depassement DECIMAL);
(SELECT SUM(NB_DEB_REG)  FROM TEST WHERE strftime('%Y-%m', DATE) = '2023-01'),
(SELECT SUM(NB_DEB_REG)  FROM TEST WHERE strftime('%Y-%m', DATE) = '2023-01'),
(SELECT SUM(NB_DEB_REG)  FROM TEST WHERE strftime('%Y-%m', DATE) = '2023-01')



CREATE VIEW IF NOT EXISTS NB_DEB_%s AS WITH NB_DEB_%s AS (SELECT DATE(S_DATE) AS DATE, CASE WHEN BALANCE >= 0 THEN BALANCE ELSE 0 END AS NB_CRE, CASE WHEN BALANCE >= 0 THEN 0 WHEN -1 * BALANCE <= (SELECT LINE FROM LINE_%s WHERE EDATE>DATE) THEN -1 * BALANCE ELSE (SELECT LINE FROM LINE_%s WHERE EDATE>DATE) END AS NB_DEB_REG, CASE WHEN BALANCE >= 0 THEN 0 WHEN -1 * BALANCE <= (SELECT LINE FROM LINE_%s WHERE EDATE>DATE) THEN 0 ELSE -1 * BALANCE - (SELECT LINE FROM LINE_%s WHERE EDATE>DATE) END AS NB_DEB_PLA FROM CONC_OP_%s) SELECT DATE, NB_CRE, NB_DEB_REG, NB_DEB_PLA, ((NB_DEB_REG * (ELECT LINE FROM TREG_%s WHERE EDATE>DATE)/100)/360 + (NB_DEB_PLA * (ELECT LINE FROM TPLA_%s WHERE EDATE>DATE)/100)/360) AS INTER FROM NB_DEB_%s;

CREATE VIEW IF NOT EXISTS NB_DEB_%s AS WITH NB_DEB_%s AS (SELECT DATE(S_DATE) AS DATE, CASE WHEN BALANCE >= 0 THEN BALANCE ELSE 0 END AS NB_CRE, CASE WHEN BALANCE >= 0 THEN 0 WHEN -1 * BALANCE <= (SELECT TAUX FROM LINE_%s WHERE EDATE>DATE('now')) THEN -1 * BALANCE ELSE (SELECT TAUX FROM LINE_%s WHERE EDATE>DATE('now')) END AS NB_DEB_REG, CASE WHEN BALANCE >= 0 THEN 0 WHEN -1 * BALANCE <= (SELECT TAUX FROM LINE_%s WHERE EDATE>DATE('now')) THEN 0 ELSE -1 * BALANCE - (SELECT TAUX FROM LINE_%s WHERE EDATE>DATE('now')) END AS NB_DEB_PLA FROM CONC_OP_%s) SELECT DATE, NB_CRE, NB_DEB_REG, NB_DEB_PLA, ((NB_DEB_REG * (SELECT TAUX FROM TREG_%s WHERE EDATE>DATE('now'))/100)/360 + (NB_DEB_PLA * (SELECT TAUX FROM TPLA_%s WHERE EDATE>DATE('now'))/100)/360) AS INTER FROM NB_DEB_%s;



